<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jiaru Primer]]></title>
  <link href="http://jiaru0730.github.io/atom.xml" rel="self"/>
  <link href="http://jiaru0730.github.io/"/>
  <updated>2015-03-16T17:41:22+08:00</updated>
  <id>http://jiaru0730.github.io/</id>
  <author>
    <name><![CDATA[Jiaru]]></name>
    <email><![CDATA[lony1107@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSObject 中的 +load 与 +initialize]]></title>
    <link href="http://jiaru0730.github.io/blog/2015/03/08/nsobject-zhong-de-plus-load-yu-plus-initialize/"/>
    <updated>2015-03-08T20:22:53+08:00</updated>
    <id>http://jiaru0730.github.io/blog/2015/03/08/nsobject-zhong-de-plus-load-yu-plus-initialize</id>
    <content type="html"><![CDATA[<p>在 NSObject 类的文档中，有两个初始化相关的方法，+load 和 +initialize，开发文档中说得很清楚，这两个方法会被 Objective-C Runtime 自动调用，然后其他的解释都不是很好懂，我看了好几遍也没有一个知根知底的感觉，所以今天来整理一下。</p>

<h1>为啥把它俩放一起说？</h1>

<ul>
<li>Objective-C 提供的两种自动类初始化方法；</li>
<li>都是 NSObject 的类方法；</li>
<li>都由 Objective-C Runtime 自动调用；</li>
<li>都和“只调用一次”有或多或少的关系；</li>
</ul>


<h1>开发文档这样说</h1>

<h2>+initialize</h2>

<ul>
<li>runtime 会在每一个类或者其任意子类刚刚好要被发送消息之前，先发 +initialize 消息给这个类；</li>
<li>runtime 以线程安全的方式发送 +initialize 消息；</li>
<li>父类在子类之前收到该消息调用；</li>
<li>如果子类没有实现 +initialize 或者子类显式地调用 [super initialize] 时，父类的实现将出现被调用多次的情况；</li>
<li>因为 +initialize 是以线程安全的方式被调用的，并且不同类被调用的顺序是没有保障的，所以一定要注意在 +initialize 方法中尽可能少地做事情；</li>
</ul>


<h2>避免 initialize 实现被多次调用</h2>

<p>开发文档中提到了，如果子类没有实现 +initialize 方法，或者子类显示调用了父类的 +initialize 将可能导致导致父类的 +initialize 实现被多次调用，如果我们不希望这种多次调用发生，可以如以下的方式来实现：</p>

<pre><code>+ (void)initialize {
  if (self == [ClassName self]) {
    // ... do the initialization ...
  }
}
</code></pre>

<h2>+load</h2>

<ul>
<li>+load 在类和分类动态加载或者静态链接的时候调用，并且前提是这个类或分类实现了 +load 方法；</li>
<li>父类在子类之前收到该消息调用；</li>
<li>类在其分类之前收到该消息调用；</li>
</ul>


<p>好了，开发文档里面大致就是这些了，你明白这俩方法做什么用怎么用了吗？反正我是没明白。</p>

<h1>所以有然后</h1>

<p>通过查阅博客和 Demo，我发现要理解清楚这两个方法，尤其是 +load 方法，很重要的一点是清楚地理解这两个方法特殊的地方。</p>

<p>+initialize 在继承方面和普通方法是基本一致的，如果子类没有实现该方法，那么自动调用的时候将调用父类的实现，因此也就有了我们之前列出来的那种为了防止被子类反复调用的事情。</p>

<p>而 +load 则很特殊，只有在类实现了 +load 方法的时候，才会被调用，如果子类没有实现该方法，并不会去调用父类的实现。</p>

<h2>初始化 Category</h2>

<p>load 方法对扩展初始化很有用。《iOS 6 Programming Pushing The Limits》一书中提到：</p>

<blockquote><p>Objective-C probides a hook called +load that runs when the category is first attached. Like +initialize, youca use this to implement category-specified setup such as initializing static variables. You can&rsquo;t safely use +initialization in a category because the class may implement this already. If multiple categories implemented +initialize, the one that would run wouldn&rsquo;t be defined.</p></blockquote>

<p>所以，初始化 Category 很适合写在 +load 方法中，而不是 +initialize。最大的问题就在与 +initialize 可能已经被类或者同一个类的其他 Category 所实现，这样就会产生覆盖的问题，最后哪一个 +initialize 被调用了是不确定的，确定的是，不是每个 +initialize 都会被调用。这种情况下使用 +load 就很合适。包括这个类和其所有的 category 在内，只要是实现了 +load 方法，都会被调用到。</p>

<h2>Lazy Invocation</h2>

<p>我们知道 +initialize 是将将好在要收到第一个消息调用时由 runtime 自动调用的，这会比 +load 迟很多，也会在一个更加友好的环境中，因此在这里的限制会少很多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://jiaru0730.github.io/blog/2015/03/06/hello-world/"/>
    <updated>2015-03-06T11:05:16+08:00</updated>
    <id>http://jiaru0730.github.io/blog/2015/03/06/hello-world</id>
    <content type="html"><![CDATA[<h1>This is my first blog with OctoPress</h1>

<p>Hello OctoPress!</p>

<p>换到Octopress来写博客了，因为之前和Flynn聊天的时候聊到自己用VPS搭WorldPress的方式。Flynn建议我能不自己做的事情就不要去做了，自己维护WorldPress的运维要花掉很多时间，也比较费事，于是接下来的时间我慢慢着手于找一个新的地方写博客。看到很多技术小伙伴用Octopress搭在GitHub上的博客看起来很不错，于是乎也给自己整了一个。</p>

<p>说来也是很惭愧的，之前的博客总共就写了两三篇文章（和我之前每一次下决心开始写博客的结果一样，慢慢就搁置了），并且基本是初学 iOS 时整理的一些比较基础的内容，因此也不再复制过来了。重新开始吧，不打算建分类了，全部写在一起，我会积极地分享，这其中的内容难免有错误或者偏颇的地方，欢迎指出问题讨论观点。</p>

<p>我的邮箱：<a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#x4c;&#x6f;&#110;&#121;&#49;&#49;&#x30;&#x37;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#x4c;&#x6f;&#x6e;&#121;&#49;&#49;&#48;&#55;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></p>

<p><img src="http://jiaru0730.github.io/images/ynote_trailer.png" width="300" height="400" title="textA textB" ></p>
]]></content>
  </entry>
  
</feed>
