<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jiaru Primer]]></title>
  <link href="http://jiaru0730.github.io/atom.xml" rel="self"/>
  <link href="http://jiaru0730.github.io/"/>
  <updated>2015-03-26T15:12:02+08:00</updated>
  <id>http://jiaru0730.github.io/</id>
  <author>
    <name><![CDATA[Jiaru]]></name>
    <email><![CDATA[lony1107@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[App Extension Basics]]></title>
    <link href="http://jiaru0730.github.io/blog/2015/03/25/app-extension-basics/"/>
    <updated>2015-03-25T10:37:12+08:00</updated>
    <id>http://jiaru0730.github.io/blog/2015/03/25/app-extension-basics</id>
    <content type="html"><![CDATA[<p>iOS 8 和 OS X v10.10 开始引入了扩展，这是个很赞的新功能，有了扩展，用户就可以在使用其他应用或者系统功能的上下文中使用我们程序的功能。苹果的文档中介绍扩展使用了这样的标题“App Extensions Increase Your Impact”，这实在是再适合不过了，因为有了扩展，我们不再局限于自己的应用，我们可以出现在任何扩展点允许的位置、合理的上下文中，为用户提供更丰富的有意义的功能。</p>

<h1>主要区别</h1>

<p>生命周期</p>

<p>可用的API</p>

<h1>扩展分类</h1>

<p>应用扩展一共有7种，并且 iOS 和 OS X 两个系统提供的扩展类型是不一样的，以下列出了所有的类型：</p>

<ul>
<li>今日视图；</li>
<li>分享；</li>
<li>Action；</li>
<li>照片编辑；</li>
<li>Finder 同步；</li>
<li>Document Provider；</li>
<li>自定义键盘；</li>
<li>Watch 应用；</li>
</ul>


<p>其中，照片编辑、Document Provider、自定义键盘只在 iOS 上可用，Finder 同步只在 OS X 可用。Apple Watch 应用不用多说，只有 iOS 可用。</p>

<h1>扩展的工作方式</h1>

<h2>扩展的生命周</h2>

<p>应用扩展的生命周期与
应用扩展的生命周期不同于应用本身，如下图所示：</p>

<p><img src="images/app_extension_life_circle.png"></p>

<p><em>图片转自苹果开发文档</em></p>

<p>通常情况下，扩展生命最明显的特征就是短，并且其生存环境通常是系统或者其他应用的上下文中。以今日视图的扩展 (Today View Extension) 来说，其启动和结束是由今日视图的操作来决定的，当新建一个今日视图的扩展项目后，我们可以看到 Xcode 自动为我们新建了一个 ViewController，如下图所示：</p>

<p><img src="images/today_view_extension_project_navigation.png"></p>

<p>需要注意的是像今日视图的扩展对应的是一个ViewController，而不是像应用一样有一个AppDelegate，这个今日视图扩展的生命周期也就是这个ViewController的生命周期。从我目前的开发经验来看，开发大部分的今日视图应用，可以就像我们之前在应用中写一个ViewController没有太大区别，就好像有别的ViewController把我们所写的应用Present出来一样。当今日视图拉下来的时候，如果我们的应用启用了，则会依次调用viewDidLoad, viewWillAppear, viewDidApplea，而当今日视图收起的时候就会依次调用viewWillAppear, viewDidAppear, dealloc。
(目前我已经为我们的产品加上了一个今日视图的扩展，我们将在后续的文章中详细介绍今日视图扩展的开发。)</p>

<p>此外，扩展的生命周期通常比较短所以尽可能避免在其生命周期中做过于复杂的事情，如果一定需要的话，考虑使用后台任务来完成。</p>

<h1>扩展与应用</h1>

<p>与扩展相关联的，有两个 App，一个是扩展需要依赖于包含在其中发布的 Containing App，另一个是在运行时能够与扩展直接产生调用关联的 Host App (更确切来说 Host App 应该是一类 App，这些 App 包含了扩展对应的扩展点，从而能够启动对应的扩展)。</p>

<h2>Containing App</h2>

<p>扩展不能够独立发布到 App Store，它需要和应用一起发布，这个应用被称为 Containing App，扩展通常就是 Containing App 功能的延伸，让用户可以在 App 之外的地方方便快捷地使用 App 的部分功能，比如在今日视图中查看当前正在进行的体育赛事的比分。</p>

<p>既然扩展一般是将应用的部分功能提取出来以供更方便的方式调用和展示，那么扩展的功能逻辑就会与应用本身存在重合的地方，建议将共同的逻辑打成一个 framework，然后让应用和扩展把这个 framework 加进去，这样可以复用代码，以后需要更新的时候也更方便。</p>

<h2>Host App</h2>

<p>在运行的时候，Host App 与扩展的关联比 Containing App 要更紧密一些。首先，是 Host App 触发了扩展运行；其次，在扩展运行的过程中，它只能与 Host App 直接通信，而与 Containing App 之间的通信比较有限。</p>

<h2>扩展与 App 的通信</h2>

<p>扩展可以以不同的方式与 Host App、Containing App 通信，如下图所示：</p>

<p><img src="images/app_extension_comunication_methods.png"></p>

<p>开发文档的截图顺带附上了我的一点标注。可以看到，扩展在运行期间可以和 Host App 直接通信，而扩展与 Containing App 的通信则比较受限制，主要可以通过两种方式，其一是我们熟悉的 openURL，这种方法可以跳转到 Containing App；其二是通过将需要共享的数据写在一个约定好的地方，让应用和扩展都去读写这一块的数据，达到数据共享的目标（这种方式需要建立一个 App Group，将应用和扩展都放在同一个组里）。</p>

<h2>发布时的注意事项</h2>

<p>扩展和应用都是以一个 target 的形式存在的，因此在发布的时候需要分别为他们配置 Provisioning Profile 和 Certificate，看到身边有好几个开发的朋友遇到过关于这两个 bundle ID 和签名证书的问题，在这里也顺便说一下，两个 target 的设置应该是这个样子的：</p>

<ul>
<li>如果应用的 bundle ID 是 com.jiaruprimer.wyhabit，那么应用的 bundle ID 应该是 com.jiaruprimer.wyhabit.XXXXX；</li>
<li>两个 target 应该使用同一个开发帐号来签名；</li>
<li>如果只是调试的话，用＊也是可以的。</li>
</ul>


<h1>做什么样的扩展？</h1>

<p>从用户的角度来看，扩展与应用有一个很重要的区别在于使用过程中的上下文——应用是独占式的，而扩展则是临时介入式的——这将对用户使用两者的习惯以及对功能的预期都有很大的影响，因此在决定是否做一个新的扩展，决定做什么样的扩展功能时，一定要认真地思考我们所提供的功能特性是否适合既定的上下文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSObject 中的 +load 与 +initialize]]></title>
    <link href="http://jiaru0730.github.io/blog/2015/03/08/nsobject-zhong-de-plus-load-yu-plus-initialize/"/>
    <updated>2015-03-08T20:22:53+08:00</updated>
    <id>http://jiaru0730.github.io/blog/2015/03/08/nsobject-zhong-de-plus-load-yu-plus-initialize</id>
    <content type="html"><![CDATA[<p>在 NSObject 类的文档中，有两个初始化相关的方法，+load 和 +initialize，开发文档中说得很清楚，这两个方法会被 Objective-C Runtime 自动调用，然后其他的解释都不是很好懂，我看了好几遍也没有一个知根知底的感觉，所以今天来整理一下。</p>

<h1>为啥把它俩放一起说？</h1>

<ul>
<li>Objective-C 提供的两种自动类初始化方法；</li>
<li>都是 NSObject 的类方法；</li>
<li>都由 Objective-C Runtime 自动调用；</li>
<li>都和“只调用一次”有或多或少的关系；</li>
</ul>


<h1>开发文档这样说</h1>

<h2>+initialize</h2>

<ul>
<li>runtime 会在每一个类或者其任意子类刚刚好要被发送消息之前，先发 +initialize 消息给这个类；</li>
<li>runtime 以线程安全的方式发送 +initialize 消息；</li>
<li>父类在子类之前收到该消息调用；</li>
<li>如果子类没有实现 +initialize 或者子类显式地调用 [super initialize] 时，父类的实现将出现被调用多次的情况；</li>
<li>因为 +initialize 是以线程安全的方式被调用的，并且不同类被调用的顺序是没有保障的，所以一定要注意在 +initialize 方法中尽可能少地做事情；</li>
</ul>


<h2>避免 initialize 实现被多次调用</h2>

<p>开发文档中提到了，如果子类没有实现 +initialize 方法，或者子类显示调用了父类的 +initialize 将可能导致导致父类的 +initialize 实现被多次调用，如果我们不希望这种多次调用发生，可以如以下的方式来实现：</p>

<pre><code>+ (void)initialize {
  if (self == [ClassName self]) {
    // ... do the initialization ...
  }
}
</code></pre>

<h2>+load</h2>

<ul>
<li>+load 在类和分类动态加载或者静态链接的时候调用，并且前提是这个类或分类实现了 +load 方法；</li>
<li>父类在子类之前收到该消息调用；</li>
<li>类在其分类之前收到该消息调用；</li>
</ul>


<p>好了，开发文档里面大致就是这些了，你明白这俩方法做什么用怎么用了吗？反正我是没明白。</p>

<h1>所以有然后</h1>

<p>通过查阅博客和 Demo，我发现要理解清楚这两个方法，尤其是 +load 方法，很重要的一点是清楚地理解这两个方法特殊的地方。</p>

<p>+initialize 在继承方面和普通方法是基本一致的，如果子类没有实现该方法，那么自动调用的时候将调用父类的实现，因此也就有了我们之前列出来的那种为了防止被子类反复调用的事情。</p>

<p>而 +load 则很特殊，只有在类实现了 +load 方法的时候，才会被调用，如果子类没有实现该方法，并不会去调用父类的实现。</p>

<h2>初始化 Category</h2>

<p>load 方法对扩展初始化很有用。《iOS 6 Programming Pushing The Limits》一书中提到：</p>

<blockquote><p>Objective-C probides a hook called +load that runs when the category is first attached. Like +initialize, youca use this to implement category-specified setup such as initializing static variables. You can&rsquo;t safely use +initialization in a category because the class may implement this already. If multiple categories implemented +initialize, the one that would run wouldn&rsquo;t be defined.</p></blockquote>

<p>所以，初始化 Category 很适合写在 +load 方法中，而不是 +initialize。最大的问题就在与 +initialize 可能已经被类或者同一个类的其他 Category 所实现，这样就会产生覆盖的问题，最后哪一个 +initialize 被调用了是不确定的，确定的是，不是每个 +initialize 都会被调用。这种情况下使用 +load 就很合适。包括这个类和其所有的 category 在内，只要是实现了 +load 方法，都会被调用到。</p>

<h2>Lazy Invocation</h2>

<p>我们知道 +initialize 是将将好在要收到第一个消息调用时由 runtime 自动调用的，这会比 +load 迟很多，也会在一个更加友好的环境中，因此在这里的限制会少很多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://jiaru0730.github.io/blog/2015/03/06/hello-world/"/>
    <updated>2015-03-06T11:05:16+08:00</updated>
    <id>http://jiaru0730.github.io/blog/2015/03/06/hello-world</id>
    <content type="html"><![CDATA[<h1>This is my first blog with OctoPress</h1>

<p>Hello OctoPress!</p>

<p>换到Octopress来写博客了，因为之前和Flynn聊天的时候聊到自己用VPS搭WorldPress的方式。Flynn建议我能不自己做的事情就不要去做了，自己维护WorldPress的运维要花掉很多时间，也比较费事，于是接下来的时间我慢慢着手于找一个新的地方写博客。看到很多技术小伙伴用Octopress搭在GitHub上的博客看起来很不错，于是乎也给自己整了一个。</p>

<p>说来也是很惭愧的，之前的博客总共就写了两三篇文章（和我之前每一次下决心开始写博客的结果一样，慢慢就搁置了），并且基本是初学 iOS 时整理的一些比较基础的内容，因此也不再复制过来了。重新开始吧，不打算建分类了，全部写在一起，我会积极地分享，这其中的内容难免有错误或者偏颇的地方，欢迎指出问题讨论观点。</p>

<p>我的邮箱：<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#x4c;&#x6f;&#110;&#121;&#49;&#x31;&#48;&#x37;&#x40;&#103;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#76;&#111;&#110;&#x79;&#49;&#49;&#x30;&#55;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;</a></p>

<p><img src="http://jiaru0730.github.io/images/ynote_trailer.png" width="300" height="400" title="textA textB" ></p>
]]></content>
  </entry>
  
</feed>
